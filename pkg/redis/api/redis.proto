syntax = "proto3";

package greyhole.redis;

option go_package = "arceus/pkg/redis/api;redis";

import "validate/validate.proto";
import "carbon/api/carbon.proto";

message Redis {
  // host:port address.
  string address = 1 [(validate.rules).string = {min_bytes : 1}];
  // Use the specified Username to authenticate the current connection
  // with one of the connections defined in the ACL list when connecting
  // to a Redis 6.0 instance, or greater, that is using the Redis ACL system.
  string username = 2;
  // Optional password. Must match the password specified in the
  // requirepass server configuration option (if connecting to a Redis 5.0 instance, or lower),
  // or the User Password when connecting to a Redis 6.0 instance, or greater,
  // that is using the Redis ACL system.
  string password = 3;
  // Database to be selected after connecting to the server.
  int32 db = 4;
  // Maximum number of retries before giving up.
  // Default is 3 retries; -1 (not 0) disables retries.
  int32 max_retries = 5;
  // Minimum backoff between each retry.
  // Default is 8 milliseconds; -1 disables backoff.
  int64 min_retry_backoff = 6; // milliseconds
  // Maximum backoff between each retry.
  // Default is 512 milliseconds; -1 disables backoff.
  int64 max_retry_backoff = 7; // milliseconds
  // Dial timeout for establishing new connections.
  // Default is 5 seconds.
  int64 dial_timeout = 8; // milliseconds
  // Timeout for socket reads. If reached, commands will fail
  // with a timeout instead of blocking. Use value -1 for no timeout and 0 for default.
  // Default is 3 seconds.
  int64 read_timeout = 9; // milliseconds
  // Timeout for socket writes. If reached, commands will fail
  // with a timeout instead of blocking.
  // Default is ReadTimeout.
  int64 write_timeout = 10; // milliseconds
  // ContextTimeoutEnabled controls whether the client respects context timeouts and deadlines.
  // See https://redis.uptrace.dev/guide/go-redis-debugging.html#timeouts
  bool context_timeout_enabled = 11;
  bool pool_fifo = 12;
  // Maximum number of socket connections.
  // Default is 10 connections per every available CPU as reported by runtime.GOMAXPROCS.
  int32 pool_size = 13;
  // Minimum number of idle connections which is useful when establishing
  // new connection is slow.
  int64 pool_timeout = 14; // milliseconds
  // Minimum number of idle connections which is useful when establishing
  // new connection is slow.
  // Default is 0. the idle connections are not closed by default.
  int32 min_idle_conns = 15;
  // Maximum number of idle connections.
  // Default is 0. the idle connections are not closed by default.
  int64 max_idle_conns = 16; // milliseconds
  int64 conn_max_idle_time = 17; // milliseconds
  int64 conn_max_lifetime = 18; // milliseconds


  // TLS Config to use. When set TLS will be negotiated.
  greyhole.carbon.TLS tls = 19;

  string namespace = 20;
  bool debug = 21;

  // ClientName will execute the `CLIENT SETNAME ClientName` command for each conn.
  string client_name = 22;
}